{% extends "base.html" %}

{% block title %}User Management{% endblock %}

{% block content %}
<div class="d-flex flex-column flex-md-row">
    <!-- Sidebar -->
    <div class="sidebar border-end bg-light p-3" style="min-width: 280px;">
        <h5 class="mb-3">Admin Menu</h5>
        <ul class="nav nav-pills flex-column">
            <li class="nav-item">
              <a href="/admin/users" class="nav-link active" aria-current="page">
                <i class="bi bi-people me-2"></i>Users
              </a>
            </li>
          </ul>
    </div>

    <!-- Main Content -->
    <div class="main-content flex-grow-1 p-3">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h2 class="h4">User Accounts</h2>
            <form method="get" action="/admin/users" class="d-flex" style="gap: 0.5rem;">
                <input type="text" name="q" class="form-control" placeholder="Search by username or role" value="{{ search_term | default(value='') }}" style="max-width: 200px;">
                <button type="submit" class="btn btn-outline-secondary">Search</button>
            </form>
            <div>
                <a href="/admin/users/add" class="btn btn-primary"><i class="bi bi-person-plus"></i> Add User</a>
            </div>
        </div>
        
        <div class="card shadow-sm">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Username</th>
                                <th>Role</th>
                                <th>Last Login</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% if users | length == 0 %}
                            <tr>
                                <td colspan="4" class="text-center text-muted">No users found.</td>
                            </tr>
                            {% else %}
                            {% for user in users %}
                            <tr>
                                <td>{{ user.id }}</td>
                                <td>{{ user.username }}</td>
                                <td><span class="badge bg-secondary">{{ user.role | capitalize }}</span></td>
                                <td>
                                    {% if user.last_login %}
                                        {{ user.last_login }}
                                    {% else %}
                                        <span class="text-muted">Never</span>
                                    {% endif %}
                                </td>
                                <td>
                                    <a href="#" class="btn btn-sm btn-outline-primary edit-user-btn" data-user-id="{{ user.id }}">Edit</a>
                                    <!-- Enable delete button, but not for the current user -->
                                    {% if user.id != current_user_id %}
                                    <form action="/admin/users/delete" method="POST" class="d-inline" onsubmit="return confirm('Are you sure you want to delete this user?');">
                                        <input type="hidden" name="user_id" value="{{ user.id }}">
                                        <button type="submit" class="btn btn-sm btn-outline-danger">Delete</button>
                                    </form>
                                    {% endif %}
                                </td>
                            </tr>
                            {% endfor %}
                            {% endif %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Enhanced Modal for editing user -->
<div class="modal fade" id="editUserModal" tabindex="-1" aria-labelledby="editUserModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-lg">
    <div class="modal-content shadow-lg border-0">
      <div class="modal-header bg-primary text-white">
        <h5 class="modal-title d-flex align-items-center" id="editUserModalLabel">
          <i class="bi bi-person-gear me-2"></i>Edit User Account
        </h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body p-4" id="editUserModalBody">
        <!-- Edit form will be loaded here -->
        <div class="text-center text-muted py-4">
          <div class="spinner-border text-primary" role="status" aria-hidden="true"></div>
          <div class="mt-2">Loading user information...</div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  var editUserModal = new bootstrap.Modal(document.getElementById('editUserModal'));
  var modalBody = document.getElementById('editUserModalBody');
  
  document.querySelectorAll('.edit-user-btn').forEach(function(btn) {
    btn.addEventListener('click', function(e) {
      e.preventDefault();
      console.log('Edit button clicked');
      
      var userId = btn.getAttribute('data-user-id');
      var username = btn.closest('tr').querySelector('td:nth-child(2)').textContent.trim();
      
      // Update modal title using createElement to avoid escaping issues
      var titleElement = document.getElementById('editUserModalLabel');
      titleElement.innerHTML = '';
      var icon = document.createElement('i');
      icon.className = 'bi bi-person-gear me-2';
      titleElement.appendChild(icon);
      titleElement.appendChild(document.createTextNode('Edit User: ' + username));
      
      // Show loading state using createElement
      modalBody.innerHTML = '';
      var loadingDiv = document.createElement('div');
      loadingDiv.className = 'text-center text-muted py-4';
      
      var spinner = document.createElement('div');
      spinner.className = 'spinner-border text-primary';
      spinner.setAttribute('role', 'status');
      spinner.setAttribute('aria-hidden', 'true');
      
      var loadingText = document.createElement('div');
      loadingText.className = 'mt-2';
      loadingText.textContent = 'Loading user information...';
      
      loadingDiv.appendChild(spinner);
      loadingDiv.appendChild(loadingText);
      modalBody.appendChild(loadingDiv);
      
      // Show modal
      editUserModal.show();
      
      // Load user data
      fetch('/admin/users/edit/' + userId)
        .then(function(response) {
          if (!response.ok) {
            throw new Error('Failed to load user data');
          }
          return response.text();
        })
        .then(function(html) {
          modalBody.innerHTML = html;
          
          // Setup form handling
          var form = document.getElementById('editUserForm');
          if (form) {
            form.addEventListener('submit', function(e) {
              e.preventDefault();
              handleFormSubmission(form);
            });
          }
        })
        .catch(function(error) {
          console.error('Error loading user data:', error);
          
          // Create error message using createElement
          modalBody.innerHTML = '';
          var errorDiv = document.createElement('div');
          errorDiv.className = 'text-center py-4';
          
          var errorIcon = document.createElement('i');
          errorIcon.className = 'bi bi-exclamation-triangle-fill text-warning display-1';
          
          var errorTitle = document.createElement('h5');
          errorTitle.className = 'mt-3';
          errorTitle.textContent = 'Failed to Load User Data';
          
          var errorText = document.createElement('p');
          errorText.className = 'text-muted';
          errorText.textContent = 'Please try again or refresh the page.';
          
          var refreshBtn = document.createElement('button');
          refreshBtn.type = 'button';
          refreshBtn.className = 'btn btn-primary';
          refreshBtn.onclick = function() { location.reload(); };
          
          var refreshIcon = document.createElement('i');
          refreshIcon.className = 'bi bi-arrow-clockwise me-1';
          refreshBtn.appendChild(refreshIcon);
          refreshBtn.appendChild(document.createTextNode('Refresh Page'));
          
          errorDiv.appendChild(errorIcon);
          errorDiv.appendChild(errorTitle);
          errorDiv.appendChild(errorText);
          errorDiv.appendChild(refreshBtn);
          modalBody.appendChild(errorDiv);
        });
    });
  });
  

  // Function to show success message in modal
  function showModalSuccess(message) {
    modalBody.innerHTML = '';
    var successDiv = document.createElement('div');
    successDiv.className = 'text-center py-4';
    
    var successIcon = document.createElement('i');
    successIcon.className = 'bi bi-check-circle-fill text-success display-1';
    
    var successTitle = document.createElement('h5');
    successTitle.className = 'mt-3 text-success';
    successTitle.textContent = 'Success!';
    
    var successText = document.createElement('p');
    successText.className = 'text-muted';
    successText.textContent = message;
    
    successDiv.appendChild(successIcon);
    successDiv.appendChild(successTitle);
    successDiv.appendChild(successText);
    modalBody.appendChild(successDiv);
  }

  function handleFormSubmission(form) {
    var formData = new FormData(form);
    var submitBtn = form.querySelector('button[type="submit"]');
    var originalBtnContent = submitBtn.innerHTML;
    
    // Update submit button using createElement
    submitBtn.innerHTML = '';
    var loadingIcon = document.createElement('i');
    loadingIcon.className = 'bi bi-arrow-clockwise me-1';
    submitBtn.appendChild(loadingIcon);
    submitBtn.appendChild(document.createTextNode('Updating...'));
    submitBtn.disabled = true;
    
    // Convert FormData to URLSearchParams for application/x-www-form-urlencoded
    var params = new URLSearchParams();
    for (var pair of formData.entries()) {
      params.append(pair[0], pair[1]);
    }
    
    fetch(form.action, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: params
    })
    .then(function(response) {
      if (response.redirected) {
        // Follow the redirect to show flash messages
        window.location.href = response.url || '/admin/users';
      } else if (response.ok) {
        // Show success message in modal and then reload
        showModalSuccess('User updated successfully!');
        setTimeout(function() {
          window.location.reload();
        }, 1500);
      } else {
        throw new Error('Update failed: ' + response.status);
      }
    })
    .catch(function(error) {
      console.error('Error updating user:', error);
      submitBtn.innerHTML = originalBtnContent;
      submitBtn.disabled = false;
      alert('Failed to update user. Please try again.');
    });
  }
});
</script>
{% endblock %}
